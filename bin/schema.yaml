openapi: 3.0.1
info:
  title: User CRUD
  description: 'This is a sample server with CRUD for user.'
  termsOfService: http://swagger.io/terms/
  contact:
    url: www.github.com/pawelWritesCode
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:1234
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Creation of new user.
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/POSTUser'
        required: true
      responses:
        200:
          description: Successfully created user
          content: {}
        400:
          description: Error
          content: {}
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: get_users_list
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GETUser'
        400:
          description: Error
          content: {}
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: get_user
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GETUser'
        400:
          description: Error
          content: {}
    put:
      tags:
        - user
      summary: Replace user
      description: Replace user
      operationId: replace_user
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/POSTUser'
        required: true
      responses:
        200:
          description: Successfully replaced user
          content: {}
        400:
          description: Error
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete user by id
      operationId: delete_user
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          schema:
            type: integer
      responses:
        204:
          description: User removed
          content: {}
        400:
          description: error
          content: {}
components:
  schemas:
    GETUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 34
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        age:
          type: integer
          example: 10
    POSTUser:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        age:
          type: integer
          example: 10